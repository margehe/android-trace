/*
硬启动/冷启动/锁屏启动/息屏启动/画C启动拆解:
T0(系统):         (MTK) AppLaunch_dispatchPtr:Up 终点 => activityStart 起始
                  (展讯) EventHub, read input_event start 终点 => activityStart 起始
                  (画C启动) GestureLauncher:handleCameraGesture 终点 => activityStart 起始
T1(APP):          activityStart 起始 => 离 connectDevice 最近的 getCameraCharacteristics 起始
T2(HAL):          getCameraCharacteristics 起始 => connectDevice结束
T3(APP):          connectDevice结束 => 第一个 createDefaultRequest开始
T4_1(HAL):        第一个 createDefaultRequest 开始 => 第一个 createDefaultRequest 结束
T4_2(APP):        第一个 createDefaultRequest 结束 => 第一个createStream开始
T4_3(HAL):        第一个 createStream 开始 => 第一个 configureStreams 结束
T4_4(APP +系统):  第一个 configureStreams结束 => 第一个finalizeOutputConfigurations开始
T4_5(HAL):        第一个 finalizeOutputConfigurations 开始 => 最后一个 finalizeOutputConfigurations 结束
T5(APP):          最后一个finalizeOutputConfigurations结束 => 第 1 submitRequestList 结束
T6(HAL):          submitRequestList结束 => 第一个 first full buffer 前一个 HIDL::ICameraDeviceCallback::processCaptureResult%server
T7(APP+HAL+SF):   第一个 first full buffer 前一个 HIDL::ICameraDeviceCallback::processCaptureResult%server => first full buffer 后的第 3 个 onDrawFrame
*/
// json
[
  {
    // SQL 匹配 slice 的字符串名, 如何带 `%` 字符, 就解析到 `slice.name LIKE` 语句中, 可以考虑全部用 `slice.name LIKE` 语句匹配
    "name": ["AppLaunch_dispatchPtr:Up", "EventHub, read input_event start", "GestureLauncher:handleCameraGesture"],
    // 空 -- 不属于任何阶段, 实际起点为
    "stage": null,
    // 计算到此 slice 时, 属于哪个模块, 如果为 null 就是起点或者仅仅为参考点, 不参与计算, 只参与查找, 如 `first full buffer`.
    "owner": null,
    // 0 --  起点, 1 -- 用来查找起始点重要特征点,  2 -- 用来查找参考结束点的重要特征点, 3 --- 参考结束点, 4 -- 其他
    "referPoint": 0,
    // 匹配线程名, 默认为空, 就不去匹配
    "threadName": null,
    // slice 的计算点是否为 slice 的 end 点. 从 slice 的结束点开始计算. true -- 从 end 点计算; false -- 从起始点计算, null -- 不参与计算, 只参与查找
    // 仅仅为参考点时,这个为 null, 如 "first full buffer", 最终不用来计算, 只用来查找前面的 processCaptureResult 和后面的 onDrawFrame
    "calcEnd": true,
    // 查询的 slice 有多个时, 需要从上一个 slice 或者下一个 slice 作为参考查找.
    // 1111 => 表示离起点最近的点
    // 2222 => 表示离起点最远的点
    // 3333 => 表示离终点最近的点
    // 4444 => 表示离终点最远的点
    // 如 
    //   1. 硬启动中的 "HIDL::ICameraDeviceCallback::processCaptureResult%server", 这个数字是 '-1', 
    //      表示先找下一个的 slice 'first full buffer', 在逆向查找, 逆向与 `first full buffer` 最近的第 1 个即为要找到的 `processCaptureResult`
    //   2. onDrawFrame 对应的这个 key 要填 `3`, 表示从上一个 `processCaptureResult` 顺向查找, 找到第 3 个即为所找.
    // 根据 nearPreviousCnt 解析出来的 refer_points 链表 
    // refer_points = [0, -1, -1, 3] 这种就无法解析, 应为 -1 依赖下一个, 而 3 又依赖上一个, 所以找不到.
    "nearPreviousCnt": 0,  //0 -- 表取上一个自身, 1 表示取上一个 slice 点最近的第 1 个 slice, -1 表示取离下一个 slice 最近的 1 个的 slice.
    "multiFrontBack": false  // 在较前和较后都出现多次的, 会干扰查找起点和终点, 需要调过. 如冷启动中的 onDrawFrame 在 connectDevice 之前会出现, 在 first full buffer 前也会出现, 这个标志就为 true
  },
  {
    "name": ["activityStart"],
    "stage": "T0",     // 阶段 T0
    "owner": "系统",
    "referPoint": 1,   // 用来查找起始点重要特征点
    "threadName": "%camera%",   // 匹配 camera 相关线程的 activityStart
    "calcEnd": false,  // 从 activityStart 起始点开始算阶段计算, (T0 为 `activityStart 起始点` - `AppLaunch_dispatchPtr:Up 结束点`)
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["getCameraCharacteristics"],
    "stage": "T1",
    "owner": "APP",
    "referPoint": 1,     // 用来查找起始点重要特征点
    "threadName": null,
    "calcEnd": false,
    "nearPreviousCnt": -1,  // 从下一个 connectDevice 开始逆序找最邻近的 getCameraCharacteristics, 这个在 connectDevice 前后都有, 必须逆序找.
    "multiFrontBack": false
  },
  {
    "name": ["connectDevice"],
    "stage": "T2",
    "owner": "HAL",
    "referPoint": 1,
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["createDefaultRequest"],
    "stage": "T3",
    "owner": "APP",
    "referPoint": 4,
    "threadName": null,
    "calcEnd": false,
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["createDefaultRequest"],
    "stage": "T4_1",
    "owner": "HAL",
    "referPoint": 4,
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": 1111,    // 和 T3 的 createDefaultRequest 是同一个
    "multiFrontBack": false
  },
  {
    "name": ["createStream"],
    "stage": "T4_2",
    "owner": "APP",
    "referPoint": 4,
    "threadName": null,
    "calcEnd": false,
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["configureStreams"],
    "stage": "T4_3",
    "owner": "HAL",
    "referPoint": 2,    //  结束点特征点
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["finalizeOutputConfigurations"],
    "stage": "T4_4",
    "owner": "App+系统",
    "referPoint": 2,     //  结束点特征点
    "threadName": null,
    "calcEnd": false,
    "nearPreviousCnt": 1111,    // 第 1 个 finalizeOutputConfigurations, 从上一个 slice 顺序找最邻近的
    "multiFrontBack": false
  },
  {
    "name": ["finalizeOutputConfigurations"],
    "stage": "T4_5",
    "owner": "Hal",
    "referPoint": 2,         //  结束点特征点
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": 2222,   // 最后一个 finalizeOutputConfigurations, 从后面的一个 slice 开始逆序找最邻近的
    "multiFrontBack": false
  },
  {
    "name": ["submitRequestList"],
    "stage": "T5",
    "owner": "APP",
    "referPoint": 2,
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["HIDL::ICameraDeviceCallback::processCaptureResult%server"],
    "stage": "T6",
    "owner": "HAL",
    "referPoint": 2,
    "threadName": null,
    "calcEnd": true,
    "nearPreviousCnt": -1,
    "multiFrontBack": false
  },
  {
    "name": ["%first full buffer"],  // 用来找上一个 processCaptureResult
    "stage": null,
    "owner": null,
    "referPoint": 3,     // 参考结束点
    "threadName": null,
    "calcEnd": null,    // 不参与计算阶段耗时
    "nearPreviousCnt": 1111,
    "multiFrontBack": false
  },
  {
    "name": ["onDrawFrame"],
    "stage": "T7",     // 阶段 T0
    "owner": "APP+HAL+SF",
    "referPoint": 4,
    "threadName": null,
    "calcEnd": true,  // 算到第 3 个 onDrawFrame 的 end 点
    "nearPreviousCnt": 3,
    "multiFrontBack": true   // 在起点处和终点处干扰查找起始点或者终点的
  },
]
